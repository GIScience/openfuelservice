[tox]
envlist = py38,py39
isolated_build = true
minversion = "3"

[testenv]
commands =
    poetry install -v
    bash -c "export DEBUGGING_CONFIG=$PWD/debug.env && \
    python app/tests_pre_start.py && \
    python app/backend_pre_start.py && \
    alembic upgrade head && \
    python app/initial_data.py && \
    pytest"
whitelist_externals = poetry
                      bash

[testenv:dockerpy38]
basepython = python3.9
commands =
    poetry install -v
    bash -c "export DEBUGGING_CONFIG=$PWD/debug.env && \
    export CELERY_BROKER_URL=amqp://guest@0.0.0.0:9672// && \
    export POSTGRES_USER=postgres && \
    export POSTGRES_PASSWORD=dontchangeme && \
    export POSTGRES_DB=debug_db && \
    export POSTGRES_PORT=9432 && \
    python app/tests_pre_start.py && \
    python app/backend_pre_start.py && \
    alembic upgrade head && \
    python app/initial_data.py && \
    pytest"
whitelist_externals = poetry
                      bash
docker =
    pytest_database
    queue
[testenv:dockerpy39]
basepython = python3.9
commands =
    poetry install -v
    bash -c "export DEBUGGING_CONFIG=$PWD/debug.env && \
    export CELERY_BROKER_URL=amqp://guest@0.0.0.0:9672// && \
    export POSTGRES_USER=postgres && \
    export POSTGRES_PASSWORD=dontchangeme && \
    export POSTGRES_DB=debug_db && \
    export POSTGRES_PORT=9432 && \
    python app/tests_pre_start.py && \
    python app/backend_pre_start.py && \
    alembic upgrade head && \
    python app/initial_data.py && \
    pytest"
whitelist_externals = poetry
                      bash
docker =
    pytest_database
    queue

[docker:pytest_database]
image = postgres:12
environment:
    PGDATA=/var/lib/postgresql/data/pgdata
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=dontchangeme
    POSTGRES_DB=debug_db
    POSTGRES_PORT=5432
ports:
    9432:5432/tcp
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
    --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
    --host=127.0.0.1 --quiet --no-align --tuples-only \
    -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[docker:queue]
# You can use any value that `docker run` would accept as the image
image = rabbitmq:3
ports:
    9672:5672/tcp

[pytest]
addopts = -x --cov=app --random-order
#addopts = -x --cov=app --cov-report=xml --random-order
