[tox]
envlist = lint,pytest-local-{py38,py39}
#envlist = lint,pytest-docker-{py38,py39}
isolated_build = true
minversion = "3"

[pytest]
testpaths = app/tests

[testenv:pytest-{local,docker,github}-{py38,py39}]
basepython =
    py38: python3.8
    py39: python3.9
commands =
    poetry install -v --no-interaction --no-root
    local: bash -c "export DEBUGGING_CONFIG=$PWD/debug.env && python app/tests_pre_start.py && python app/backend_pre_start.py && alembic upgrade head && python app/initial_data.py && pytest -x --cov=app --cov-report=term-missing --random-order"
    github: bash -c "python app/tests_pre_start.py && python app/backend_pre_start.py && alembic upgrade head && python app/initial_data.py && pytest -x --cov=app --cov-report=xml --random-order"
    docker: bash -c "export DEBUGGING_CONFIG=$PWD/debug.env && export CELERY_BROKER_URL=amqp://guest@0.0.0.0:9672// && export POSTGRES_USER=postgres && export POSTGRES_PASSWORD=dontchangeme && export POSTGRES_DB=debug_db && export POSTGRES_PORT=9432 && python app/tests_pre_start.py && python app/backend_pre_start.py && alembic upgrade head && python app/initial_data.py && pytest -x --cov=app --cov-report=term-missing --random-order"
docker =
    docker: pytest_database
    docker: queue
whitelist_externals = poetry
                      bash

[testenv:lint]
commands =
    poetry install --no-interaction --no-root --extras lint
    mypy app
    black app --check
    isort --recursive --check-only app
    flake8 --jobs=2 app

whitelist_externals = poetry

[testenv:format]
basepython = python3.9
commands =
    poetry install --extras lint
    isort --recursive  --force-single-line-imports --apply app
    autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place app --exclude=__init__.py
    black app
    isort --recursive --apply app

whitelist_externals = poetry

[docker:pytest_database]
image = postgres:12
environment :
    PGDATA=/var/lib/postgresql/data/pgdata
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=dontchangeme
    POSTGRES_DB=debug_db
    POSTGRES_PORT=5432
ports :
    9432:5432/tcp
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
                  --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
                  --host=127.0.0.1 --quiet --no-align --tuples-only \
                  -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[docker:queue]
# You can use any value that `docker run` would accept as the image
image = rabbitmq:3
ports :
    9672:5672/tcp
