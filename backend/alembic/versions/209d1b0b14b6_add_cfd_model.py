"""Add cfd Model

Revision ID: 209d1b0b14b6
Revises: 936918094389
Create Date: 2021-12-29 12:49:15.443231

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '209d1b0b14b6'
down_revision = '936918094389'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('carfueldatacar', sa.Column('electric_energy_consumption_miles_kwh', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('manual_or_automatic', sa.String(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('powertrain', sa.String(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('engine_power_ps', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('engine_power_kw', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wh_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('diesel_ved_supplement', sa.Boolean(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('testing_scheme', sa.String(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_low', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_medium', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_high', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_extra_high', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_combined', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_imperial_combined_weighted', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_low', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_medium', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_high', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_extra_high', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_combined', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_metric_combined_weighted', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_co2', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('wltp_co2_weighted', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('equivalent_all_electric_range_miles', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('equivalent_all_electric_range_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('electric_range_city_miles', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('electric_range_city_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('emissions_co_m   g_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('thc_emissions_mg_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('emissions_nox_mg_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('thc_nox_emissions_mg_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('particulates_no_mg_km', sa.Float(), nullable=True))
    op.add_column('carfueldatacar', sa.Column('noise_level_dba', sa.Float(), nullable=True))
    op.alter_column('carfueldatacar', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('carfueldatacar', 'transmission',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('carfueldatacar', 'engine_capacity',
               existing_type=sa.Integer(),
               nullable=True)
    op.drop_column('carfueldatacar', 'emissions_co_mg_per_km')
    op.drop_column('carfueldatacar', 'co2_g_per_km')
    op.drop_column('carfueldatacar', 'noise_level_dB_a_')
    op.drop_column('carfueldatacar', 'thc_plus_nox_emissions_mg_per_km')
    op.drop_column('carfueldatacar', 'total_cost_per_12000_miles')
    op.drop_column('carfueldatacar', 'fuel_cost_12000_miles')
    op.drop_column('carfueldatacar', 'e_consumption_wh_per_km')
    op.drop_column('carfueldatacar', 'imperial_urban_cold')
    op.drop_column('carfueldatacar', 'electricity_cost')
    op.drop_column('carfueldatacar', 'metric_urban_cold')
    op.drop_column('carfueldatacar', 'metric_extra_urban')
    op.drop_column('carfueldatacar', 'emissions_nox_mg_per_km')
    op.drop_column('carfueldatacar', 'metric_combined')
    op.drop_column('carfueldatacar', 'imperial_extra_urban')
    op.drop_column('carfueldatacar', 'fuel_cost_6000_miles')
    op.drop_column('carfueldatacar', 'imperial_combined')
    op.drop_column('carfueldatacar', 'thc_emissions_mg_per_km')
    op.drop_column('carfueldatacar', 'particulates_no_mg_per_km')
    op.drop_column('carfueldatacar', 'e_consumption_miles_per_kWh')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('carfueldatacar', sa.Column('e_consumption_miles_per_kWh', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('particulates_no_mg_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('thc_emissions_mg_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('imperial_combined', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('fuel_cost_6000_miles', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('imperial_extra_urban', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('metric_combined', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('emissions_nox_mg_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('metric_extra_urban', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('metric_urban_cold', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('electricity_cost', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('imperial_urban_cold', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('e_consumption_wh_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('fuel_cost_12000_miles', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('total_cost_per_12000_miles', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('thc_plus_nox_emissions_mg_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('noise_level_dB_a_', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('co2_g_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('carfueldatacar', sa.Column('emissions_co_mg_per_km', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('carfueldatacar', 'engine_capacity',
               existing_type=sa.Integer(),
               nullable=False)
    op.alter_column('carfueldatacar', 'transmission',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('carfueldatacar', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('carfueldatacar', 'noise_level_dba')
    op.drop_column('carfueldatacar', 'particulates_no_mg_km')
    op.drop_column('carfueldatacar', 'thc_nox_emissions_mg_km')
    op.drop_column('carfueldatacar', 'emissions_nox_mg_km')
    op.drop_column('carfueldatacar', 'thc_emissions_mg_km')
    op.drop_column('carfueldatacar', 'emissions_co_mg_km')
    op.drop_column('carfueldatacar', 'electric_range_city_km')
    op.drop_column('carfueldatacar', 'electric_range_city_miles')
    op.drop_column('carfueldatacar', 'equivalent_all_electric_range_km')
    op.drop_column('carfueldatacar', 'equivalent_all_electric_range_miles')
    op.drop_column('carfueldatacar', 'wltp_co2_weighted')
    op.drop_column('carfueldatacar', 'wltp_co2')
    op.drop_column('carfueldatacar', 'wltp_metric_combined_weighted')
    op.drop_column('carfueldatacar', 'wltp_metric_combined')
    op.drop_column('carfueldatacar', 'wltp_metric_extra_high')
    op.drop_column('carfueldatacar', 'wltp_metric_high')
    op.drop_column('carfueldatacar', 'wltp_metric_medium')
    op.drop_column('carfueldatacar', 'wltp_metric_low')
    op.drop_column('carfueldatacar', 'wltp_imperial_combined_weighted')
    op.drop_column('carfueldatacar', 'wltp_imperial_combined')
    op.drop_column('carfueldatacar', 'wltp_imperial_extra_high')
    op.drop_column('carfueldatacar', 'wltp_imperial_high')
    op.drop_column('carfueldatacar', 'wltp_imperial_medium')
    op.drop_column('carfueldatacar', 'wltp_imperial_low')
    op.drop_column('carfueldatacar', 'testing_scheme')
    op.drop_column('carfueldatacar', 'diesel_ved_supplement')
    op.drop_column('carfueldatacar', 'wh_km')
    op.drop_column('carfueldatacar', 'engine_power_kw')
    op.drop_column('carfueldatacar', 'engine_power_ps')
    op.drop_column('carfueldatacar', 'powertrain')
    op.drop_column('carfueldatacar', 'manual_or_automatic')
    op.drop_column('carfueldatacar', 'electric_energy_consumption_miles_kwh')
    # ### end Alembic commands ###
