version: "3.3"

services:
  debug_database:
    image: postgis/postgis:12-3.1-alpine
    env_file:
      - ./backend/debug.env
#    volumes:
#      - debug-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - database
    ports:
      - "65432:5432"
  debug_pgadmin:
    image: dpage/pgadmin4
    networks:
      - database
    depends_on:
      - debug_database
    env_file:
      - ./backend/debug.env
    volumes:
      - debug-pgadmin-data:/var/lib/pgadmin
    ports:
      - "5051:5050"
  debug_flower:
    image: mher/flower:0.9.7
    depends_on:
      - debug_queue
    env_file:
      - ./backend/debug.env
    ports:
      - "5556:5555"
    command:
      - "--broker=amqp://guest@debug_queue:5672//"
      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
      # and change the queue service's image as well
      # - "--broker_api=http://guest:guest@queue:15672/api//"
    networks:
      - database
  debug_queue:
    image: rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #
    # You also have to change the flower command
    ports:
      - "5672:5672"
    networks:
      - database
  debug_celeryworker:
    image: "${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}"
    entrypoint: /bin/bash
    command: "/worker-start.sh"
    depends_on:
      - debug_database
      - debug_queue
    env_file:
      - ./backend/debug.env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - RUN=celery -A  app.worker worker -l info -Q main-queue -c 1
      - POSTGRES_SERVER=debug_database
      - POSTGRES_PORT=5432
      - CELERY_BROKER_URL=amqp://guest@debug_queue//
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: true
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
#    volumes:
#      - ./backend:/app
    networks:
      - database

networks:
  database:
volumes:
  debug-db-data:
  debug-pgadmin-data:
