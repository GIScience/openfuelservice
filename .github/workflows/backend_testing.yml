name: Continous Integration

on:
  pull_request:
    branches: '**'

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install git
          python -m pip install --upgrade pip
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.11
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-lint-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd "$PWD/backend/"
          poetry install --no-interaction --no-root --extras lint
      - name: Run tox lint
        run: |
          cd "$PWD/backend/"
          tox -e lint
  linux-tests:
    needs:
      - lint
    strategy:
      fail-fast: true
      matrix:
        config:
          - python-version: 3.8
            tox: py38
          - python-version: 3.9
            tox: py39
        poetry-version: [ 1.1.11 ]
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    services:
      queue:
        image: rabbitmq:3
        ports:
          - 9672:5672
      pytest-database:
        image: postgres:12
        env:
          PGDATA: "/var/lib/postgresql/data/pgdata"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: dontchangeme
          POSTGRES_DB: debug_db
          POSTGRES_PORT: 5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9432:5432
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install git
          python -m pip install --upgrade pip
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run tox
        env:
          DEBUGGING_CONFIG: "$PWD/backend/app/debug.env"
          CELERY_BROKER_URL: "amqp://guest@0.0.0.0:9672//"
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "dontchangeme"
          POSTGRES_DB: "debug_db"
          POSTGRES_PORT: "9432"
          TOX_TESTENV_PASSENV: DEBUGGING_CONFIG, CELERY_BROKER_URL, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_PORT
        run: |
          cd "$PWD/backend/"
          tox -e ${{ matrix.config.tox }}
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          flags: unittests
#          env_vars: OS,PYTHON
#          name: codecov-umbrella
#          fail_ci_if_error: true
#          verbose: true
