name: Continous Integration

on:
  pull_request:
    branches: '**'

jobs:
#  lint:
#    runs-on: ubuntu-20.04
#    steps:
#      - name: checkout
#        uses: actions/checkout@v2
#      - name: Set up testing Python ${{ matrix.config.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip tox
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          version: 1.1.11
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#          installer-parallel: true
#      - name: Run tox lint
#        run: |
#          cd "$PWD/backend/"
#          poetry run tox -e lint
  linux-tests:
#    needs:
#      - lint
    strategy:
      fail-fast: true
      matrix:
        config:
          - python-version: '3.8'
            tox: py38
          - python-version: '3.9'
            tox: py39
          - python-version: '3.10'
            tox: py310
        poetry-version: [ 1.1.11 ]
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    services:
      queue:
        image: rabbitmq:3
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: dontchangethis
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Run tox
        env:
          DEBUGGING_CONFIG: "$GITHUB_WORKSPACE/backend/github.env"
          CELERY_BROKER_URL: "amqp://guest@queue:5672//"
          POSTGRES_SERVER: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: dontchangethis
          POSTGRES_DB: test_db
          POSTGRES_PORT: 5432
          TOX_TESTENV_PASSENV: DEBUGGING_CONFIG,CELERY_BROKER_URL,POSTGRES_SERVER,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,POSTGRES_PORT
        run: |
          cd "$PWD/backend/"
          echo DEBUGGING_CONFIG="$DEBUGGING_CONFIG"
          echo CELERY_BROKER_URL="$CELERY_BROKER_URL"
          echo POSTGRES_SERVER="$POSTGRES_SERVER"
          echo POSTGRES_USER="$POSTGRES_USER"
          echo POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
          echo POSTGRES_DB="$POSTGRES_DB"
          echo POSTGRES_PORT="$POSTGRES_PORT"
          export TOX_TESTENV_PASSENV=DEBUGGING_CONFIG,CELERY_BROKER_URL,POSTGRES_SERVER,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,POSTGRES_PORT
          poetry run tox -e pytest-github-${{ matrix.config.tox }}
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          flags: unittests
#          env_vars: OS,PYTHON
#          name: codecov-umbrella
#          fail_ci_if_error: true
#          verbose: true
